formation_mpc: # defined per generate_parameter_library
  control_horizon_in_s: {
    type: double,
    default_value: 0,
    validation: {
      gt<>: 0
    }
  }
  number_of_points: {
    type: int,
    default_value: 0,
    validation: {
      gt<>: 0
    }
  }
  dt: {
    type: double,
    default_value: 0.01,
    description: "Controller sampling time in seconds",
    validation: {
      gt<>: 0.0
    }
  }
  cartesian_axis: {
    type: bool_array,
    default_value: [true, true, true, true, true, true],
    description: "Cartesian axis to enable: [x, y, z, rx, ry, rz]. Default all enabled",
    validation: {
      fixed_size<>: 6
    }
  }
  clik:
    active: {
      type: bool,
      default_value: True,
      description: "Activate or deactivate clik"
    }
    gain: {
      type: double,
      default_value: 1.0,
      validation: {
        gt_eq<>: 0.0
      }
    }
  pid:
    P: {
      type: double_array,
      default_value: [],
      description: ""
    }
  ns: {
    type: string,
    default_value: "follower",
    description: "Name of the formation leader"
  }
  mobile_base_link: {
    type: string,
    default_value: "/base_footprint",
    description: "refered to the mobile base"
  }
  manipulator_base_link: {
    type: string,
    default_value: "/base_link",
    description: "manipulator base"
  }
  tool_frame: {
    type: string,
    default_value: "/tool0",
    description: "tool frame"
  }
  map_frame: {
    type: string,
    default_value: "map",
    description: "map/world reference frame"
  }
  mount_frame: {
    type: string,
    default_value: "base_link",
    description: "link to attach the fake_base"
  }
  payload_frame: {
    type: string,
    default_value: "",
    description: "Object frame"
  }
  grasp_frame: {
    type: string,
    default_value: "",
    description: "Frame representing the grasp point of the payload"
  }
  robot_description: {
    type: string,
    default_value: "",
    description: "Robot description"
  }
  joints:
    base: {
      type: string_array,
      default_value: [],
      description: "Which joints belong to the mobile base"
    }
    arm: {
      type: string_array,
      default_value: [],
      description: "Which joints belong to the arm"
    }
  command_joints: {
    type: string_array,
    default_value: [],
    description: "Name of the joints to control"
  }
  command_interface: {
    type: string_array,
    default_value: [],
    description: "Names of the control_interface to command",
  }
  state_interface: {
    type: string_array,
    default_value: [],
    description: "Names of the state_interface",
  }
  cmd_vel_topic: {
    type: string,
    default_value: "cmd_vel",
    description: "Name of the cmd_vel topic on which the base will read it cmd",
  }
  cartesian_task_weight:
    active: {
      type: bool,
      default_value: false,
      description: "activate or deactivate scaling for cartesian task: ||J*qp-s*V||^2 + ||1-s||^2"
    }
    weight: {
      type: double,
      default_value: 1.0,
      description: "Scaling maximum value",
      validation: {
        lt_eq<>: 2.0
      }
    }
  scaling: {
    type: double,
    default_value: 1.0,
    description: "Scaling limit"
  }
  leader_topic: {
    type: string,
    default_value: "twist_in_payload_frame",
    description: "Twist computed by leader and moved to payload frame"
  }
  base_max_vel: {
    type: double_array,
    default_value: [0.0,0.0,0.0,0.0,0.0,0.0],
    description: "Maximum velocity of the payload",
    validation: {
      fixed_size<>: [6],
      lower_element_bounds<>: 0.0
    }
  }
  fake_base:
    package: {
      type: string,
      default_value: "",
      description: "Package inside which there is the xacro"
    }
    path: {
      type: string,
      default_value: "",
      description: "Relative path to xacro from <package>/share/"
    }
